Parameters:
  EnvironmentName:
    Type: String
    Default: dev
  ApplicationName:
    Type: String
    Default: ServerlessLink
    Description: The name of the serverlesss application
  DomainName:
    Type: String
    Default: serverless.link
    Description: The name of the domain for the serverless application
  TableName:
    Type: String
    Default: ServerlessLinkMaps
    Description: The name of the dynamodb table
  PartitionKey:
    Type: String
    Default: LinkId
    Description: The name of the main parition key
  ReadCapacityUnits:
    Default: 1
    Description: Dynamo read capacity units
    Type: Number
  WriteCapacityUnits:
    Default: 1
    Description: Dynamo write capacity units
    Type: Number
  StageName:
    Type: String
    Default: ${self:custom.stageName}

Resources:
  WebsiteBucket:
    Type: "AWS::S3::Bucket"
    Properties:
      BucketName:
        Ref: DomainName
      WebsiteConfiguration:
        IndexDocument: index.html

  WebsiteBucketPolicy:
    Type: "AWS::S3::BucketPolicy"
    Properties:
      Bucket:
        Ref: DomainName
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
        - Effect: Allow
          Principal: "*"
          Action: s3:GetObject
          Resource:
            Fn::Join: ["", ["arn:aws:s3:::", Ref: DomainName, "/*"]]

  S3CopyRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName:
        Fn::Join: ["-", [Ref: EnvironmentName, Ref: ApplicationName, "role"]]
      Path:
        Fn::Join: ["" ,["/", Ref: ApplicationName, "/"]]
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          -
            Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        -
          PolicyName: S3AccessPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              -
                Sid: AllowLogging
                Effect: Allow
                Action:
                  - "logs:CreateLogGroup"
                  - "logs:CreateLogStream"
                  - "logs:PutLogEvents"
                Resource: "*"
              -
                Sid: DestBucketWriteAccess
                Effect: Allow
                Action:
                  - "s3:ListBucket"
                  - "s3:GetObject"
                  - "s3:PutObject"
                  - "s3:PutObjectAcl"
                  - "s3:PutObjectVersionAcl"
                  - "s3:DeleteObject"
                  - "s3:DeleteObjectVersion"
                  - "s3:CopyObject"
                Resource:
                  - Fn::Join: ["", ["arn:aws:s3:::", Ref: WebsiteBucket]]
                  - Fn::Join: ["", ["arn:aws:s3:::", Ref: WebsiteBucket, "/*"]]

  DynamoDBTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName:
        Ref: TableName

      AttributeDefinitions:
      - AttributeName:
          Ref: PartitionKey
        AttributeType: S

      KeySchema:
      - AttributeName:
          Ref: PartitionKey
        KeyType: HASH

      ProvisionedThroughput:
        ReadCapacityUnits:
          Ref: ReadCapacityUnits
        WriteCapacityUnits:
          Ref: WriteCapacityUnits

      TimeToLiveSpecification:
        AttributeName: ExpirationTime
        Enabled: true

  AcmDomainCertificate:
    Type: AWS::CertificateManager::Certificate
    Properties:
      ValidationMethod: DNS
      DomainName:
        Fn::Join: [".", ["m", Ref: DomainName]]

  ApiGatewayDomain:
    Type: AWS::ApiGateway::DomainName
    Properties:
      # Use if you want it to create a cloudfront distribution
#      CertificateArn:
#        Ref: AcmDomainCertificate
#      EndpointConfiguration:
#        Types:
#          - EDGE
      EndpointConfiguration:
        Types:
          - REGIONAL
      RegionalCertificateArn:
        Ref: AcmDomainCertificate
      DomainName:
        Fn::Join: [".", ["m", Ref: DomainName]]

  DomainMapping:
    Type: AWS::ApiGateway::BasePathMapping
    Properties:
      BasePath: ""
      Stage:
        Ref: StageName
      DomainName:
        Ref: ApiGatewayDomain
      RestApiId:
       Ref: ApiGatewayRestApi

Outputs:
  EventsJsonArchive:
    Value:
      Ref: DynamoDBTable

